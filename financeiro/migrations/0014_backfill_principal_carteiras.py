# Generated by Django 5.2.5 on 2025-09-23 15:59

import logging

from django.db import migrations


logger = logging.getLogger(__name__)


def create_principal_carteiras(apps, schema_editor):
    """Backfill Carteiras principais e atualiza lançamentos vinculados."""

    Carteira = apps.get_model("financeiro", "Carteira")
    CentroCusto = apps.get_model("financeiro", "CentroCusto")
    ContaAssociado = apps.get_model("financeiro", "ContaAssociado")
    Lancamento = apps.get_model("financeiro", "LancamentoFinanceiro")

    tipo_operacional = "operacional"

    created_carteiras = 0
    centro_to_carteira = {}
    conta_to_carteira = {}

    for centro in CentroCusto.objects.all().iterator():
        carteira, created = Carteira.objects.update_or_create(
            centro_custo_id=centro.id,
            conta_associado=None,
            tipo=tipo_operacional,
            defaults={
                "nome": (centro.nome or "Centro de Custo")[:255],
                "descricao": f"Carteira principal do centro de custo {centro.nome}",
                "saldo": centro.saldo,
            },
        )
        if created:
            created_carteiras += 1
        else:
            carteira.nome = (carteira.nome or centro.nome or "Centro de Custo")[:255]
            carteira.descricao = f"Carteira principal do centro de custo {centro.nome}"
            carteira.saldo = centro.saldo
            carteira.conta_associado = None
            carteira.save(update_fields=["nome", "descricao", "saldo", "conta_associado"])
        centro_to_carteira[centro.id] = carteira.id

    contas = ContaAssociado.objects.select_related("user").all().iterator()
    for conta in contas:
        user = getattr(conta, "user", None)
        identificador = getattr(user, "email", "") if user else ""
        if not identificador:
            identificador = getattr(user, "username", "") if user else ""
        if not identificador:
            identificador = str(conta.id)
        nome = f"Carteira de {identificador}"[:255]
        descricao = f"Carteira principal da conta {identificador}"[:255]
        carteira, created = Carteira.objects.update_or_create(
            conta_associado_id=conta.id,
            tipo=tipo_operacional,
            defaults={
                "nome": nome,
                "descricao": descricao,
                "saldo": conta.saldo,
                "centro_custo": None,
            },
        )
        if created:
            created_carteiras += 1
        else:
            carteira.nome = nome
            carteira.descricao = descricao
            carteira.saldo = conta.saldo
            carteira.centro_custo = None
            carteira.save(update_fields=["nome", "descricao", "saldo", "centro_custo"])
        conta_to_carteira[conta.id] = carteira.id

    carteira_updates = 0
    for centro_id, carteira_id in centro_to_carteira.items():
        carteira_updates += Lancamento.objects.filter(centro_custo_id=centro_id).update(carteira_id=carteira_id)

    contraparte_updates = 0
    for conta_id, carteira_id in conta_to_carteira.items():
        contraparte_updates += Lancamento.objects.filter(conta_associado_id=conta_id).update(
            carteira_contraparte_id=carteira_id
        )

    logger.info(
        "Carteiras principais criadas/atualizadas: %s; lançamentos atualizados: carteiras=%s, contrapartes=%s",
        created_carteiras,
        carteira_updates,
        contraparte_updates,
    )


def log_irreversible(*args, **kwargs):
    """Registra que a reversão foi intencionalmente omitida."""

    logger.warning("Reversão ignorada para backfill_principal_carteiras; dados não serão alterados.")


class Migration(migrations.Migration):

    dependencies = [
        ("financeiro", "0013_carteira_conta_associado_alter_carteira_centro_custo_and_more"),
    ]

    operations = [
        migrations.RunPython(create_principal_carteiras, log_irreversible),
    ]
