"""
Django settings for Hubx project.

Generated by 'django-admin startproject' using Django 5.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import base64
import os
from decimal import Decimal
from pathlib import Path

import sentry_sdk
from celery.schedules import crontab
from sentry_sdk.integrations.django import DjangoIntegration

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Versão do HTMX utilizada nos templates
HTMX_VERSION = "1.9.12"

sentry_sdk.init(
    dsn=os.getenv("SENTRY_DSN"),
    integrations=[DjangoIntegration()],
    traces_sample_rate=float(os.getenv("SENTRY_TRACES_SAMPLE_RATE", "0.0")),
    profiles_sample_rate=float(os.getenv("SENTRY_PROFILES_SAMPLE_RATE", "0.0")),
)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-f_(^m#wo6a9xfpmwi)8n7bo@k@gs!sp_(9-=jhi0%2r6o@2i^8"

# Chave para criptografia de campos sensíveis
FERNET_KEY = os.environ.get(
    "FERNET_KEY",
    base64.urlsafe_b64encode(SECRET_KEY.encode()[:32]).decode(),
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    "testserver",
    "localhost",
    "127.0.0.1",
]

# Application definition

INSTALLED_APPS = [
    # ‑‑‑‑ Apps nativos do Django ‑‑‑‑
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.postgres",
    "django_prometheus",
    # ‑‑‑‑ Terceiros (third‑party) ‑‑‑‑
    "django_ratelimit",
    "rest_framework",
    "rest_framework.authtoken",
    "widget_tweaks",
    "django_select2",
    "phonenumber_field",
    "channels",
    "simple_history",
    "silk",
    "storages",
    # ‑‑‑‑ Apps da sua solução ‑‑‑‑
    "core",
    "dashboard",
    "empresas",
    "accounts.apps.AccountsConfig",
    "organizacoes",
    "tokens.apps.TokensConfig",
    "nucleos",
    "agenda",
    "chat",
    "feed",
    "discussao.apps.DiscussaoConfig",
    "configuracoes",
    "financeiro.apps.FinanceiroConfig",
    "notificacoes.apps.NotificacoesConfig",
    "audit",
]

MIDDLEWARE = [
    "django_prometheus.middleware.PrometheusBeforeMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "silk.middleware.SilkyMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "configuracoes.middleware.RequestInfoMiddleware",
    "configuracoes.middleware.UserLocaleMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "simple_history.middleware.HistoryRequestMiddleware",
    "dashboard.middleware.DashboardTimingMiddleware",
    "audit.middleware.AuditMiddleware",
    "django_prometheus.middleware.PrometheusAfterMiddleware",
]

ROOT_URLCONF = "Hubx.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "core.context_processors.htmx_version",
            ],
        },
    },
]

WSGI_APPLICATION = "Hubx.wsgi.application"
ASGI_APPLICATION = "Hubx.asgi.application"

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {"hosts": [("127.0.0.1", 6379)]},
    }
}

# Database
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
        "ATOMIC_REQUESTS": True,
    }
}

CACHE_URL = os.getenv("CACHE_URL")
if CACHE_URL:
    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": CACHE_URL,
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
            },
        }
    }
else:  # pragma: no cover - fallback para testes sem Redis
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
            "LOCATION": "hubx",
        }
    }

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "accounts.validators.ComplexPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
]
# 12 rounds mantém o tempo de hash abaixo de ~300ms em máquinas modernas
BCRYPT_ROUNDS = 12

# Internationalization
LANGUAGE_CODE = "pt-br"
TIME_ZONE = "America/Sao_Paulo"
USE_I18N = True
USE_TZ = True

# Static files
STATIC_URL = "/static/"
STATICFILES_DIRS = [BASE_DIR / "static"]
STATIC_ROOT = BASE_DIR / "staticfiles"

# Media files
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"
USER_MEDIA_MAX_SIZE = 50 * 1024 * 1024  # 50MB
USER_MEDIA_ALLOWED_EXTS = [".jpg", ".jpeg", ".png", ".gif", ".pdf", ".mp4", ".webm"]

ORGANIZACOES_MAX_IMAGE_SIZE = 5 * 1024 * 1024
ORGANIZACOES_ALLOWED_IMAGE_EXTENSIONS = ["jpg", "jpeg", "png"]

if os.getenv("AWS_STORAGE_BUCKET_NAME"):
    DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
    AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
    AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
    AWS_STORAGE_BUCKET_NAME = os.getenv("AWS_STORAGE_BUCKET_NAME")
    AWS_S3_REGION_NAME = os.getenv("AWS_S3_REGION_NAME", "us-east-1")
    AWS_S3_SIGNATURE_VERSION = "s3v4"
else:
    DEFAULT_FILE_STORAGE = "django.core.files.storage.FileSystemStorage"

FEED_IMAGE_ALLOWED_EXTS = [".jpg", ".jpeg", ".png", ".gif"]
FEED_PDF_ALLOWED_EXTS = [".pdf"]
FEED_VIDEO_ALLOWED_EXTS = [".mp4", ".webm"]
FEED_IMAGE_MAX_SIZE = 5 * 1024 * 1024
FEED_PDF_MAX_SIZE = 10 * 1024 * 1024
FEED_VIDEO_MAX_SIZE = 20 * 1024 * 1024
FEED_RATE_LIMIT_POST = os.getenv("FEED_RATE_LIMIT_POST", "20/m")
FEED_RATE_LIMIT_READ = os.getenv("FEED_RATE_LIMIT_READ", "100/m")

DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024
FILE_UPLOAD_MAX_MEMORY_SIZE = DATA_UPLOAD_MAX_MEMORY_SIZE

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
AUTH_USER_MODEL = "accounts.User"

LOGIN_URL = "/accounts/login/"
LOGIN_REDIRECT_URL = "/perfil/"

AUTHENTICATION_BACKENDS = [
    "accounts.backends.EmailBackend",
    "django.contrib.auth.backends.ModelBackend",
]

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "tokens.auth.ApiTokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_THROTTLE_RATES": {
        "chat_upload": "20/hour",
        "chat_flag": "10/minute",
    },
}

# Valores padrão para mensalidades
MENSALIDADE_ASSOCIACAO = Decimal("50.00")
MENSALIDADE_NUCLEO = Decimal("30.00")
MENSALIDADE_VENCIMENTO_DIA = 10

# Celery Beat

CELERY_BEAT_SCHEDULE = {
    "notificar_inadimplencia": {
        "task": "financeiro.tasks.inadimplencia.notificar_inadimplencia",
        "schedule": crontab(minute=0, hour=7),
    },
    "revogar_tokens_expirados": {
        "task": "tokens.tasks.revogar_tokens_expirados",
        "schedule": crontab(minute=0, hour=0),
    },
    "enviar_relatorios_diarios": {
        "task": "notificacoes.tasks.enviar_relatorios_diarios",
        "schedule": crontab(minute="*"),
    },
    "enviar_relatorios_semanais": {
        "task": "notificacoes.tasks.enviar_relatorios_semanais",
        "schedule": crontab(minute="*"),
    },
    "gerar_cobrancas_mensais": {
        "task": "financeiro.tasks.cobrancas.gerar_cobrancas_mensais",
        "schedule": crontab(minute=0, hour=0, day_of_month=1),
    },
    "expirar_solicitacoes_pendentes": {
        "task": "nucleos.tasks.expirar_solicitacoes_pendentes",
        "schedule": crontab(minute=0, hour=0),
    },
    "cleanup_audit_logs": {
        "task": "audit.tasks.cleanup_old_logs",
        "schedule": crontab(minute=0, hour=0, day_of_week="sun"),
    },
}

# Notificações
# Configurações de notificação – usar valores de ambiente quando definidos,
# senão definir um valor fictício para evitar ImproperlyConfigured
NOTIFICATIONS_EMAIL_API_URL = os.getenv("NOTIFICATIONS_EMAIL_API_URL", "https://stub-email.example")
NOTIFICATIONS_EMAIL_API_KEY = os.getenv("NOTIFICATIONS_EMAIL_API_KEY", "dummy-key-email")
NOTIFICATIONS_PUSH_API_URL = os.getenv("NOTIFICATIONS_PUSH_API_URL", "https://stub-push.example")
NOTIFICATIONS_PUSH_API_KEY = os.getenv("NOTIFICATIONS_PUSH_API_KEY", "dummy-key-push")
NOTIFICATIONS_WHATSAPP_API_URL = os.getenv("NOTIFICATIONS_WHATSAPP_API_URL", "https://stub-whatsapp.example")
NOTIFICATIONS_WHATSAPP_API_KEY = os.getenv("NOTIFICATIONS_WHATSAPP_API_KEY", "dummy-key-whatsapp")
NOTIFICATIONS_ENABLED = True

SILENCED_SYSTEM_CHECKS = ["django_ratelimit.E003", "django_ratelimit.W001"]
RATELIMIT_VIEW = "feed.api.ratelimit_exceeded"
RATELIMIT_CACHE = "default"

AUDIT_LOG_RETENTION_YEARS = int(os.getenv("AUDIT_LOG_RETENTION_YEARS", "5"))
